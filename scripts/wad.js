function readString(encoding) {
    var encoder = new TextDecoder(encoding);
    return function (buf, offset, length) {
        var end = offset + length;
        while (buf[end - 1] === 0) {
            end--;
        }
        var slice = buf.slice(offset, end);
        return encoder.decode(slice);
    };
}
var readASCIIString = readString("ASCII");
function readI16LE(buf, at) {
    var n = readU16LE(buf, at);
    if ((n >> 15) == 0) {
        return n;
    }
    else {
        return n | 0xFFFF0000;
    }
}
function readU16LE(buf, at) {
    return (buf[at + 1] << 8) | buf[at];
}
function readU32LE(buf, at) {
    return (buf[at + 3] << 24) | (buf[at + 2] << 16) | (buf[at + 1] << 8) | buf[at];
}
var WADHeader = /** @class */ (function () {
    function WADHeader(type, lumpCount, dictionaryPointer) {
        this.type = type;
        this.lumpCount = lumpCount;
        this.dictionaryPointer = dictionaryPointer;
    }
    return WADHeader;
}());
var WAD = /** @class */ (function () {
    function WAD(header, dictionary) {
        this.header = header;
        this.dictionary = dictionary;
    }
    WAD.FileMimeType = "application/x-doom-wad";
    return WAD;
}());
var WADLump = /** @class */ (function () {
    function WADLump(name, data) {
        this.name = name;
        this.data = data;
    }
    WADLump.NameLength = 8;
    WADLump.StructSize = 16;
    return WADLump;
}());
function parseWad(file) {
    if (file.type !== WAD.FileMimeType) {
        return Promise.reject("Unsupported mime type! Requires: " + WAD.FileMimeType + ", but was " + file.type);
    }
    return file.arrayBuffer().then(function (buf) {
        var memory = new Uint8Array(buf);
        return parseHeader(memory, 0).then(function (header) {
            var dict = parseDictionary(memory, header.dictionaryPointer, header.lumpCount);
            return new WAD(header, dict);
        });
    });
}
function parseHeader(buf, offset) {
    var type = readASCIIString(buf, offset, 4);
    if (type == "IWAD" || type == "PWAD") {
        var lumpCount = readU32LE(buf, 4);
        var dictPointer = readU32LE(buf, 8);
        return Promise.resolve(new WADHeader(type, lumpCount, dictPointer));
    }
    else {
        return Promise.reject("Broken WAD file or unknown WAD type: " + type);
    }
}
function parseDictionary(buf, offset, lumpCount) {
    var dict = [];
    for (var i = 0; i < lumpCount; ++i) {
        var lumpOffset = offset + (i * WADLump.StructSize);
        var dataPointer = readU32LE(buf, lumpOffset);
        var dataLength = readU32LE(buf, lumpOffset + 4);
        var name_1 = readASCIIString(buf, lumpOffset + 8, WADLump.NameLength);
        dict.push(new WADLump(name_1, buf.slice(dataPointer, dataPointer + dataLength)));
    }
    return dict;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsVUFBVSxDQUFDLFFBQWdCO0lBQ2hDLElBQUksT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3ZDLE9BQU8sVUFBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU07UUFDdkIsSUFBSSxHQUFHLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUN6QixPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLEdBQUcsRUFBRSxDQUFBO1NBQ1I7UUFDRCxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNsQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEMsQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQUVELElBQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUUzQyxTQUFTLFNBQVMsQ0FBQyxHQUFlLEVBQUUsRUFBVTtJQUMxQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzFCLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxDQUFBO0tBQ1g7U0FBTTtRQUNILE9BQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQTtLQUN4QjtBQUNMLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxHQUFlLEVBQUUsRUFBVTtJQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDdkMsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEdBQWUsRUFBRSxFQUFVO0lBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ25GLENBQUM7QUFJRDtJQUtJLG1CQUFZLElBQWEsRUFBRSxTQUFpQixFQUFFLGlCQUF5QjtRQUNuRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUMxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUE7SUFDOUMsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FBQyxBQVZELElBVUM7QUFFRDtJQU1JLGFBQVksTUFBaUIsRUFBRSxVQUF5QjtRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQTtJQUNoQyxDQUFDO0lBUmUsZ0JBQVksR0FBRyx3QkFBd0IsQ0FBQTtJQVMzRCxVQUFDO0NBQUEsQUFWRCxJQVVDO0FBRUQ7SUFPSSxpQkFBWSxJQUFZLEVBQUUsSUFBZ0I7UUFDdEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7SUFDcEIsQ0FBQztJQVRlLGtCQUFVLEdBQUcsQ0FBQyxDQUFBO0lBQ2Qsa0JBQVUsR0FBRyxFQUFFLENBQUE7SUFTbkMsY0FBQztDQUFBLEFBWEQsSUFXQztBQUlELFNBQVMsUUFBUSxDQUFDLElBQVU7SUFDeEIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxZQUFZLEVBQUU7UUFDaEMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLHNDQUFvQyxHQUFHLENBQUMsWUFBWSxrQkFBYSxJQUFJLENBQUMsSUFBTSxDQUFDLENBQUE7S0FDdEc7SUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO1FBQzlCLElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQ3JDLElBQUksSUFBSSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUM5RSxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEdBQWUsRUFBRSxNQUFjO0lBQ2hELElBQUksSUFBSSxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzFDLElBQUksSUFBSSxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksTUFBTSxFQUFFO1FBQ2xDLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDakMsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNuQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLENBQVUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFBO0tBQy9FO1NBQU07UUFDSCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsMENBQXdDLElBQU0sQ0FBQyxDQUFBO0tBQ3hFO0FBQ0wsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQWUsRUFBRSxNQUFjLEVBQUUsU0FBaUI7SUFDdkUsSUFBSSxJQUFJLEdBQWtCLEVBQUUsQ0FBQTtJQUU1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2hDLElBQUksVUFBVSxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEQsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUM1QyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUMvQyxJQUFJLE1BQUksR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRW5FLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFdBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDakY7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNmLENBQUMifQ==